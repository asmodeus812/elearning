Arrays

The basic way to declare an array in Java is to use the type followed by the variable name and empty square brackets. For example, you might write “int integers with empty brackets.” However, to actually create the array in memory, you need to initialize it using the new keyword, specifying the type and the desired size. For instance, you might create an array of one hundred integers and assign it to the variable called integers.

Initialization lists for arrays use curly braces to surround the elements. Unlike string literals, these initialization lists are not interned. This means that if you create two arrays with the same initialization list, they will not share the same reference in memory, even though the contents are identical and defined at compile time.

Arrays in Java are mutable, which means you can change the value of individual elements after creation. However, you cannot change the length of an array once it has been created. If you need a different size, you must create a new array.

For example, you might define two arrays called month_days and month_days2, both initialized with the same list of numbers representing the days in each month. If you compare their references, the result will be false, because they are two separate objects in memory. This is different from how string literals are handled, where interning can cause identical strings to share the same reference.

When you allocate an array using the new keyword, the elements are automatically initialized. Numeric types are set to zero, reference types are set to null, and boolean types are set to false.

Multidimensional arrays can be defined by stacking square brackets. There is no strict limit to the number of dimensions you can create, though at least one is required. For example, you might attempt to declare a two-dimensional array without specifying a size, but this will result in a compile-time error because the new keyword requires a size. You can create a two-dimensional array with four rows and five columns, where all elements are initialized to zero and each row has a fixed length of five. Alternatively, you can create an array with four rows, but leave the columns undefined, meaning each row initially points to null and must be initialized separately. You can also create a three-dimensional array with four rows, but leave the inner dimensions uninitialized, requiring manual setup for each row. For instance, you might initialize the first row to a two-dimensional array of size one by one.

Initialization lists for multidimensional arrays work similarly to those for one-dimensional arrays. Each entry in the list is itself a list, and, as before, interning is not performed. For example, you might define a two-dimensional array where each row contains the results of multiplying the row and column indices.

There is also an alternate syntax for declaring arrays. You can place the square brackets after the type or after the variable name. This allows you to declare multiple arrays on the same line. For example, if you write “int nums, nums2, nums3 with brackets after each variable,” only the variable with brackets is actually an array. If you write “int with brackets, then nums, nums2, nums3,” all variables on that line are arrays. This distinction is important when declaring multiple variables at once.


